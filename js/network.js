window.URL=window.URL||window.webkitURL,window.isRtcSupported=!!(window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection);class ServerConnection{constructor(){this._connect(),Events.on("beforeunload",e=>this._disconnect()),Events.on("pagehide",e=>this._disconnect())}_connect(){if(clearTimeout(this._reconnectTimer),this._isConnected()||this._isConnecting())return;const e=new WebSocket("wss://27c17135-9e34-41b7-bf77-41e7f4a55195.id.repl.co/server/webrtc");e.binaryType="arraybuffer",e.onopen=(e=>console.log("WS: server connected")),e.onmessage=(e=>this._onMessage(e.data)),e.onclose=(e=>this._onDisconnect()),e.onerror=(e=>console.error(e)),this._socket=e}_onMessage(e){switch(e=JSON.parse(e),console.log("WS:",e),e.type){case"peers":Events.fire("peers",e.peers);break;case"peer-joined":Events.fire("peer-joined",e.peer);break;case"peer-left":Events.fire("peer-left",e.peerId);break;case"signal":Events.fire("signal",e);break;case"ping":this.send({type:"pong"});break;case"display-name":Events.fire("display-name",e);break;default:console.error("WS: unkown message type",e)}}send(e){this._isConnected()&&this._socket.send(JSON.stringify(e))}_disconnect(){this.send({type:"disconnect"}),this._socket.onclose=null,this._socket.close()}_onDisconnect(){console.log("WS: server disconnected"),Events.fire("notify-user","Connection lost. Retry in 5 seconds..."),clearTimeout(this._reconnectTimer),this._reconnectTimer=setTimeout(e=>this._connect(),5e3)}_isConnected(){return this._socket&&this._socket.readyState===this._socket.OPEN}_isConnecting(){return this._socket&&this._socket.readyState===this._socket.CONNECTING}}class Peer{constructor(e,t){this._server=e,this._peerId=t,this._filesQueue=[],this._busy=!1}sendJSON(e){this._send(JSON.stringify(e))}sendFiles(e){for(let t=0;t<e.length;t++)this._filesQueue.push(e[t]);this._busy||this._dequeueFile()}_dequeueFile(){if(!this._filesQueue.length)return;this._busy=!0;const e=this._filesQueue.shift();this._sendFile(e)}_sendFile(e){this.sendJSON({type:"header",name:e.name,mime:e.type,size:e.size}),this._chunker=new FileChunker(e,e=>this._send(e),e=>this._onPartitionEnd(e)),this._chunker.nextPartition()}_onPartitionEnd(e){this.sendJSON({type:"partition",offset:e})}_onReceivedPartitionEnd(e){this.sendJSON({type:"partition-received",offset:e})}_sendNextPartition(){this._chunker&&!this._chunker.isFileEnd()&&this._chunker.nextPartition()}_sendProgress(e){this.sendJSON({type:"progress",progress:e})}_onMessage(e){if("string"==typeof e)switch(e=JSON.parse(e),console.log("RTC:",e),e.type){case"header":this._onFileHeader(e);break;case"partition":this._onReceivedPartitionEnd(e);break;case"partition-received":this._sendNextPartition();break;case"progress":this._onDownloadProgress(e.progress);break;case"transfer-complete":this._onTransferCompleted();break;case"text":this._onTextReceived(e)}else this._onChunkReceived(e)}_onFileHeader(e){this._lastProgress=0,this._digester=new FileDigester({name:e.name,mime:e.mime,size:e.size},e=>this._onFileReceived(e))}_onChunkReceived(e){if(!e.byteLength)return;this._digester.unchunk(e);const t=this._digester.progress;this._onDownloadProgress(t),t-this._lastProgress<.01||(this._lastProgress=t,this._sendProgress(t))}_onDownloadProgress(e){Events.fire("file-progress",{sender:this._peerId,progress:e})}_onFileReceived(e){Events.fire("file-received",e),this.sendJSON({type:"transfer-complete"})}_onTransferCompleted(){this._onDownloadProgress(1),this._reader=null,this._busy=!1,this._dequeueFile(),Events.fire("notify-user","File transfer completed.")}sendText(e){const t=btoa(unescape(encodeURIComponent(e)));this.sendJSON({type:"text",text:t})}_onTextReceived(e){const t=decodeURIComponent(escape(atob(e.text)));Events.fire("text-received",{text:t,sender:this._peerId})}}class RTCPeer extends Peer{constructor(e,t){super(e,t),t&&this._connect(t,!0)}_connect(e,t){this._conn||this._openConnection(e,t),t?this._openChannel():this._conn.ondatachannel=(e=>this._onChannelOpened(e))}_openConnection(e,t){this._isCaller=t,this._peerId=e,this._conn=new RTCPeerConnection(RTCPeer.config),this._conn.onicecandidate=(e=>this._onIceCandidate(e)),this._conn.onconnectionstatechange=(e=>this._onConnectionStateChange(e)),this._conn.oniceconnectionstatechange=(e=>this._onIceConnectionStateChange(e))}_openChannel(){const e=this._conn.createDataChannel("data-channel",{ordered:!0,reliable:!0});e.binaryType="arraybuffer",e.onopen=(e=>this._onChannelOpened(e)),this._conn.createOffer().then(e=>this._onDescription(e)).catch(e=>this._onError(e))}_onDescription(e){this._conn.setLocalDescription(e).then(t=>this._sendSignal({sdp:e})).catch(e=>this._onError(e))}_onIceCandidate(e){e.candidate&&this._sendSignal({ice:e.candidate})}onServerMessage(e){this._conn||this._connect(e.sender,!1),e.sdp?this._conn.setRemoteDescription(new RTCSessionDescription(e.sdp)).then(t=>{if("offer"===e.sdp.type)return this._conn.createAnswer().then(e=>this._onDescription(e))}).catch(e=>this._onError(e)):e.ice&&this._conn.addIceCandidate(new RTCIceCandidate(e.ice))}_onChannelOpened(e){console.log("RTC: channel opened with",this._peerId);const t=e.channel||e.target;t.onmessage=(e=>this._onMessage(e.data)),t.onclose=(e=>this._onChannelClosed()),this._channel=t}_onChannelClosed(){console.log("RTC: channel closed",this._peerId),this.isCaller&&this._connect(this._peerId,!0)}_onConnectionStateChange(e){switch(console.log("RTC: state changed:",this._conn.connectionState),this._conn.connectionState){case"disconnected":this._onChannelClosed();break;case"failed":this._conn=null,this._onChannelClosed()}}_onIceConnectionStateChange(){switch(this._conn.iceConnectionState){case"failed":console.error("ICE Gathering failed");break;default:console.log("ICE Gathering",this._conn.iceConnectionState)}}_onError(e){console.error(e)}_send(e){if(!this._channel)return this.refresh();this._channel.send(e)}_sendSignal(e){e.type="signal",e.to=this._peerId,this._server.send(e)}refresh(){this._isConnected()||this._isConnecting()||this._connect(this._peerId,this._isCaller)}_isConnected(){return this._channel&&"open"===this._channel.readyState}_isConnecting(){return this._channel&&"connecting"===this._channel.readyState}}class PeersManager{constructor(e){this.peers={},this._server=e,Events.on("signal",e=>this._onMessage(e.detail)),Events.on("peers",e=>this._onPeers(e.detail)),Events.on("files-selected",e=>this._onFilesSelected(e.detail)),Events.on("send-text",e=>this._onSendText(e.detail)),Events.on("peer-left",e=>this._onPeerLeft(e.detail))}_onMessage(e){this.peers[e.sender]||(this.peers[e.sender]=new RTCPeer(this._server)),this.peers[e.sender].onServerMessage(e)}_onPeers(e){e.forEach(e=>{this.peers[e.id]?this.peers[e.id].refresh():window.isRtcSupported&&e.rtcSupported?this.peers[e.id]=new RTCPeer(this._server,e.id):this.peers[e.id]=new WSPeer(this._server,e.id)})}sendTo(e,t){this.peers[e].send(t)}_onFilesSelected(e){this.peers[e.to].sendFiles(e.files)}_onSendText(e){this.peers[e.to].sendText(e.text)}_onPeerLeft(e){const t=this.peers[e];delete this.peers[e],t&&t._peer&&t._peer.close()}}class WSPeer{_send(e){e.to=this._peerId,this._server.send(e)}}class FileChunker{constructor(e,t,s){this._chunkSize=64e3,this._maxPartitionSize=1e6,this._offset=0,this._partitionSize=0,this._file=e,this._onChunk=t,this._onPartitionEnd=s,this._reader=new FileReader,this._reader.addEventListener("load",e=>this._onChunkRead(e.target.result))}nextPartition(){this._partitionSize=0,this._readChunk()}_readChunk(){const e=this._file.slice(this._offset,this._offset+this._chunkSize);this._reader.readAsArrayBuffer(e)}_onChunkRead(e){this._offset+=e.byteLength,this._partitionSize+=e.byteLength,this._onChunk(e),this._isPartitionEnd()||this.isFileEnd()?this._onPartitionEnd(this._offset):this._readChunk()}repeatPartition(){this._offset-=this._partitionSize,this._nextPartition()}_isPartitionEnd(){return this._partitionSize>=this._maxPartitionSize}isFileEnd(){return this._offset>=this._file.size}get progress(){return this._offset/this._file.size}}class FileDigester{constructor(e,t){this._buffer=[],this._bytesReceived=0,this._size=e.size,this._mime=e.mime||"application/octet-stream",this._name=e.name,this._callback=t}unchunk(e){this._buffer.push(e),this._bytesReceived+=e.byteLength||e.size;this._buffer.length;if(this.progress=this._bytesReceived/this._size,isNaN(this.progress)&&(this.progress=1),this._bytesReceived<this._size)return;let t=new Blob(this._buffer,{type:this._mime});this._callback({name:this._name,mime:this._mime,size:this._size,blob:t})}}class Events{static fire(e,t){window.dispatchEvent(new CustomEvent(e,{detail:t}))}static on(e,t){return window.addEventListener(e,t,!1)}}RTCPeer.config={sdpSemantics:"unified-plan",iceServers:[{urls:"stun:stun.l.google.com:19302"}]};
